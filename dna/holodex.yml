{
  # This is a holochain scaffold yaml definition. http://ceptr.org/projects/holochain

  # Scaffold Version
  # The hc-scaffold schema version of this file.
  "scaffoldVersion": "0.0.1",
  "generator": "hc-scaffold:0.0.2+afbc120",

  # DNA File Version
  # Version indicator for changes to DNA
  "Version": 1,

  # DNA Unique ID
  # This ID differentiates your app from others. For example, to tell one Slack team from another which same code.
  "UUID": "2ef9fa48-2a33-424f-a4bf-b0591b2a71d8",

  # Application Name
  # What would you like to call your holochain app?
  "Name": "holodex",

  # Properties
  # Properties that you want available across all Zomes.
  "Properties": {

    # Application Description
    # Briefly describe your holochain app.
    "description": "A pluggable app for other holochain based apps for enabling indexing",

    # Language
    # The base (human) language of this holochain app.
    "language": "en"
  },

  # Properties Schema File
  # Describes the entries in the Properties section of your dna file.
  "PropertiesSchemaFile": "properties_schema.json",

  # DHT Settings
  # Configure the properties of your Distributed Hash Table (e.g. hash algorithm, neighborhood size, etc.).
  "DHTConfig": {
    "HashType": "sha2-256"
  },

  # Zomes
  # List the Zomes your application will support.
  "Zomes": [
  {
      "Name": "anchor",
      "Description": "Anchor zome",
      "RibosomeType": "js",
      "CodeFile": "anchor.js",
      "Entries": [
          {
              "Name": "anchor",
              "DataFormat": "json",
              "Sharing": "public"
          },
          {
              "Name": "anchor_links",
              "DataFormat": "links",
              "Sharing": "public"
          }
      ],
      "Functions": [
          {
              "Name": "anchor_type_create",
              "CallingType": "string",
              "Exposure":"public"
          },
          {
            "Name": "addAnchor",
            "CallingType": "string",
            "Exposure":"public"
          },
          {
            "Name": "anchor_create",
            "CallingType": "json",
            "Exposure":"public"
          },
          {
            "Name": "anchor_update",
            "CallingType": "json",
            "Exposure":"public"
          },
          {
            "Name": "anchor_type_list",
            "CallingType": "string",
            "Exposure":"public"
          }


        ]
    },
    {

      # Zome Name
      # The name of this code module.
      "Name": "ConfigureIndexNodes",

      # Zome Description
      # What is the purpose of this module?
      "Description": "Providing index nodes configurations",

      # Nucleus Type
      # What scripting language will you code in?
      "NucleusType": "js",

      # Code File
      # Points to the main script file for this Zome.
      "CodeFile": "configureindexnodes.js",

      # Zome Entries
      # Data stored and tracked by your Zome.
      "Entries": [
        {
          "Name": "NumberOfNodes", # The name of this entry.
          "Required": true, # Is this entry required?
          "DataFormat": "string", # What type of data should this entry store?
          "Sharing": "public", # Should this entry be publicly accessible?
          "_": "cru"
        }
      ],

      # Zome Functions
      # Functions which can be called in your Zome's API.
      "Functions": [
        {
          "Name": "NumberOfNodesCreate", # The name of this function.
          "CallingType": "string", # Data format for parameters passed to this function.
          "Exposure": "public", # Level to which is this function exposed.
          "_": "c:NumberOfNodes"
        },
        {
          "Name": "NumberOfNodesRead", # The name of this function.
          "CallingType": "string", # Data format for parameters passed to this function.
          "Exposure": "public", # Level to which is this function exposed.
          "_": "r:NumberOfNodes"
        },
        {
          "Name": "NumberOfNodesUpdate", # The name of this function.
          "CallingType": "string", # Data format for parameters passed to this function.
          "Exposure": "public", # Level to which is this function exposed.
          "_": "u:NumberOfNodes"
        },
        {
          "Name": "getNearestIndexNode", # The name of this function.
          "CallingType": "json", # Data format for parameters passed to this function.
          "Exposure": "", # Level to which is this function exposed.
        }
      ],

      # Zome Source Code
      # The logic that will control Zome behavior
      "ZomeCode": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  // any genesis code here\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  validation functions for every DHT entry change\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the DHT\n * @param {string} entryName - the name of entry being modified\n * @param {*} entry - the entry data to be set\n * @param {?} header - ?\n * @param {?} pkg - ?\n * @param {?} sources - ?\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"NumberOfNodes\":\n      // validation code here\n      return false;\n    default:\n      // invalid entry name!!\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the DHT\n * @param {string} entryName - the name of entry being modified\n * @param {*} entry - the entry data to be set\n * @param {?} header - ?\n * @param {?} pkg - ?\n * @param {?} sources - ?\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"NumberOfNodes\":\n      // validation code here\n      return false;\n    default:\n      // invalid entry name!!\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the DHT\n * @param {string} entryName - the name of entry being modified\n * @param {*} entry - the entry data to be set\n * @param {?} header - ?\n * @param {*} replaces - the old entry data\n * @param {?} pkg - ?\n * @param {?} sources - ?\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"NumberOfNodes\":\n      // validation code here\n      return false;\n    default:\n      // invalid entry name!!\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the DHT\n * @param {string} entryName - the name of entry being modified\n * @param {string} hash - the hash of the entry to remove\n * @param {?} pkg - ?\n * @param {?} sources - ?\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"NumberOfNodes\":\n      // validation code here\n      return false;\n    default:\n      // invalid entry name!!\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}"
    },
    {

      # Zome Name
      # The name of this code module.
      "Name": "IndexContent",

      # Zome Description
      # What is the purpose of this module?
      "Description": "Generic indexing functions provision",

      # Nucleus Type
      # What scripting language will you code in?
      "NucleusType": "js",

      # Code File
      # Points to the main script file for this Zome.
      "CodeFile": "indexcontent.js",

      # Zome Entries
      # Data stored and tracked by your Zome.
      "Entries": [
        {
          "Name": "ContentToIndex", # The name of this entry.
          "Required": true, # Is this entry required?
          "DataFormat": "string", # What type of data should this entry store?
          "Sharing": "public", # Should this entry be publicly accessible?
          "_": "cru"
        },
        {
          "Name": "IgnoreWords", # The name of this entry.
          "Required": true, # Is this entry required?
          "DataFormat": "string", # What type of data should this entry store?
          "Sharing": "public", # Should this entry be publicly accessible?
          "_": "cru"
        }
      ],

      # Zome Functions
      # Functions which can be called in your Zome's API.
      "Functions": [
        {
          "Name": "ContentToIndexCreate", # The name of this function.
          "CallingType": "string", # Data format for parameters passed to this function.
          "Exposure": "public", # Level to which is this function exposed.
          "_": "c:ContentToIndex"
        },
        {
          "Name": "ContentToIndexRead", # The name of this function.
          "CallingType": "string", # Data format for parameters passed to this function.
          "Exposure": "public", # Level to which is this function exposed.
          "_": "r:ContentToIndex"
        },
        {
          "Name": "ContentToIndexUpdate", # The name of this function.
          "CallingType": "string", # Data format for parameters passed to this function.
          "Exposure": "public", # Level to which is this function exposed.
          "_": "u:ContentToIndex"
        },
        {
          "Name": "IgnoreWordsCreate", # The name of this function.
          "CallingType": "string", # Data format for parameters passed to this function.
          "Exposure": "public", # Level to which is this function exposed.
          "_": "c:IgnoreWords"
        },
        {
          "Name": "IgnoreWordsRead", # The name of this function.
          "CallingType": "string", # Data format for parameters passed to this function.
          "Exposure": "public", # Level to which is this function exposed.
          "_": "r:IgnoreWords"
        },
        {
          "Name": "IgnoreWordsUpdate", # The name of this function.
          "CallingType": "string", # Data format for parameters passed to this function.
          "Exposure": "public", # Level to which is this function exposed.
          "_": "u:IgnoreWords"
        },
        {
          "Name": "IndexContent", # The name of this function.
          "CallingType": "string", # Data format for parameters passed to this function.
          "Exposure": "", # Level to which is this function exposed.
        }
      ],

      # Zome Source Code
      # The logic that will control Zome behavior
      "ZomeCode": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  // any genesis code here\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  validation functions for every DHT entry change\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the DHT\n * @param {string} entryName - the name of entry being modified\n * @param {*} entry - the entry data to be set\n * @param {?} header - ?\n * @param {?} pkg - ?\n * @param {?} sources - ?\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"ContentToIndex\":\n      // validation code here\n      return false;\n    case \"IgnoreWords\":\n      // validation code here\n      return false;\n    default:\n      // invalid entry name!!\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the DHT\n * @param {string} entryName - the name of entry being modified\n * @param {*} entry - the entry data to be set\n * @param {?} header - ?\n * @param {?} pkg - ?\n * @param {?} sources - ?\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"ContentToIndex\":\n      // validation code here\n      return false;\n    case \"IgnoreWords\":\n      // validation code here\n      return false;\n    default:\n      // invalid entry name!!\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the DHT\n * @param {string} entryName - the name of entry being modified\n * @param {*} entry - the entry data to be set\n * @param {?} header - ?\n * @param {*} replaces - the old entry data\n * @param {?} pkg - ?\n * @param {?} sources - ?\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"ContentToIndex\":\n      // validation code here\n      return false;\n    case \"IgnoreWords\":\n      // validation code here\n      return false;\n    default:\n      // invalid entry name!!\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the DHT\n * @param {string} entryName - the name of entry being modified\n * @param {string} hash - the hash of the entry to remove\n * @param {?} pkg - ?\n * @param {?} sources - ?\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"ContentToIndex\":\n      // validation code here\n      return false;\n    case \"IgnoreWords\":\n      // validation code here\n      return false;\n    default:\n      // invalid entry name!!\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}"
    },
    {

      # Zome Name
      # The name of this code module.
      "Name": "IndexAppSpecific",

      # Zome Description
      # What is the purpose of this module?
      "Description": "Applicatio specific indexing provision",

      # Nucleus Type
      # What scripting language will you code in?
      "NucleusType": "js",

      # Code File
      # Points to the main script file for this Zome.
      "CodeFile": "indexappspecific.js",

      # Zome Entries
      # Data stored and tracked by your Zome.
      "Entries": [],

      # Zome Functions
      # Functions which can be called in your Zome's API.
      "Functions": [],

      # Zome Source Code
      # The logic that will control Zome behavior
      "ZomeCode": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  // any genesis code here\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  validation functions for every DHT entry change\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the DHT\n * @param {string} entryName - the name of entry being modified\n * @param {*} entry - the entry data to be set\n * @param {?} header - ?\n * @param {?} pkg - ?\n * @param {?} sources - ?\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    default:\n      // invalid entry name!!\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the DHT\n * @param {string} entryName - the name of entry being modified\n * @param {*} entry - the entry data to be set\n * @param {?} header - ?\n * @param {?} pkg - ?\n * @param {?} sources - ?\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    default:\n      // invalid entry name!!\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the DHT\n * @param {string} entryName - the name of entry being modified\n * @param {*} entry - the entry data to be set\n * @param {?} header - ?\n * @param {*} replaces - the old entry data\n * @param {?} pkg - ?\n * @param {?} sources - ?\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    default:\n      // invalid entry name!!\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the DHT\n * @param {string} entryName - the name of entry being modified\n * @param {string} hash - the hash of the entry to remove\n * @param {?} pkg - ?\n * @param {?} sources - ?\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    default:\n      // invalid entry name!!\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}"
    }
  ]
}
